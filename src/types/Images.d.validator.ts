/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv, * as AJV from 'ajv';
import addFormats from 'ajv-formats'; import { formatNames } from 'ajv-formats/dist/formats';
import Images from './Images.d';
undefined
export const ajv = new Ajv({ "allErrors": true, "coerceTypes": false, "removeAdditional": false, "strict": false, "strictNumbers": false, "strictRequired": false, "strictSchema": false, "strictTuples": false, "strictTypes": false, "useDefaults": true });
addFormats(ajv, { mode: "fast", formats: formatNames, keywords: true });
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { Images };
export const ImagesSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "Image": {
      "defaultProperties": [
      ],
      "properties": {
        "formats": {
          "items": {
            "enum": [
              "galaxyA51",
              "galaxyJ7Pro",
              "galaxyS9P",
              "iPad",
              "iphone13Pro",
              "mac",
              "q4k"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "subject": {
          "type": "string"
        }
      },
      "required": [
        "formats",
        "subject"
      ],
      "type": "object"
    }
  },
  "properties": {
    "images": {
      "items": {
        "$ref": "#/definitions/Image"
      },
      "type": "array"
    }
  },
  "required": [
    "images"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<AJV.ValidateFunction, 'errors'>
export const isImages = ajv.compile(ImagesSchema) as ValidateFunction<Images>;
export default function validate(value: unknown): Images {
  if (isImages(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isImages.errors!.filter((e: any) => e.keyword !== 'if'), { dataVar: 'Images' }) +
      '\n\n' +
      inspect(value),
    );
  }
};
